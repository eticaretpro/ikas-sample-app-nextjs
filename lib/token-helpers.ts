import { AppBridgeHelper } from '@ikas/app-helpers';
import { AuthConnectParams } from '@ikas/api-client';
import { ApiRequests } from './api-requests';
import { NextRouter } from 'next/router';

const TOKEN_KEY = 'token';

export class TokenHelpers {
  /**
   *
   * You can only use this method if your app is displayed in IFrame within ikas dashboard
   * otherwise it won't retrieve token via AppBridge and throw a timeout error
   *
   */
  static getTokenForIframeApp = async (router: NextRouter) => {
    let token = sessionStorage.getItem(TOKEN_KEY);
    if (token) {
      const tokenData = JSON.parse(atob(token.split('.')[1]));

      // Return token if it is not expired
      if (new Date().getTime() < tokenData.exp * 1000) return token;
    }

    // Check if token is inside an IFrame
    if (window.self !== window.top) {
      // Try to retrieve token from ikas dashboard via app bridge
      try {
        // If not found in session storage
        token = (await AppBridgeHelper.getNewToken()) || null;
        if (token) {
          // Save it to the session storage
          sessionStorage.setItem(TOKEN_KEY, token);
          return token;
        }
      } catch (e) {
        console.error(e);
      }
      await router.push('/authorize-store');
    }
    return;
  };

  /**
   *
   * This method only works if the URL has certain query parameters.
   * These params are generated by ikas and appended your App Url which is defined at Partner dashboard
   * Since the signature is encrypted by your appSecret you should validate it on the server-side
   *
   * @param router Next Router object
   * @param params extracted query params from 'window.location'
   */
  static getTokenForExternalApp = async (router: NextRouter, params: URLSearchParams) => {
    if (params.has('storeName')) {
      if (
        params.has('merchantId') &&
        params.has('signature') &&
        params.has('authorizedAppId') &&
        params.has('timestamp')
      ) {
        const connectParams: AuthConnectParams = {
          authorizedAppId: params.get('authorizedAppId')!,
          merchantId: params.get('merchantId')!,
          signature: params.get('signature')!,
          storeName: params.get('storeName')!,
          timestamp: params.get('timestamp')!,
        };

        // Call `api/get-token-with-signature` with extracted parameters
        const res = await ApiRequests.getTokenWithSignature(connectParams);
        if (res.status == 200 && res.data?.hasOwnProperty('token')) {
          // @ts-ignore
          const token = res.data.token;

          // Save token to the session storage
          sessionStorage.setItem(TOKEN_KEY, token);

          return token;
        }
      }
      window.location.replace(`/api/oauth/authorize/ikas?storeName=${params.get('storeName')}`);
      return;
    }

    await router.push('/authorize-store');
    return;
  };

  static setToken = async (router: NextRouter, params: URLSearchParams) => {
    if (params.has('token') && params.has('redirectUrl')) {
      const token = params.get('token')!;

      // Save token to the session storage
      sessionStorage.setItem(TOKEN_KEY, token);

      window.location.replace(params.get('redirectUrl')!);
    }

    await router.push('/authorize-store');
    return;
  };
}
